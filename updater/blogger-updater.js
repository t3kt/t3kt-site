// Generated by CoffeeScript 1.6.3
(function() {
  var BloggerUpdater, Deferred, NOT_IMPLEMENTED, SourceUpdater, config, createItem, db, matchesCategories, moment, set_intersection, sourceKey, typeKey, util, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  config = require('../config/config');

  util = require('../models/util');

  NOT_IMPLEMENTED = util.NOT_IMPLEMENTED;

  db = require('../models/db');

  moment = require('moment');

  Deferred = require('Deferred');

  SourceUpdater = require('./index').SourceUpdater;

  createItem = require('./index').createItem;

  set_intersection = require('util').set_intersection;

  typeKey = 'entry';

  sourceKey = 'blogger';

  matchesCategories = function(entry, categories) {
    return set_intersection(entry.categories || [], categories || []).length !== 0;
  };

  BloggerUpdater = (function(_super) {
    __extends(BloggerUpdater, _super);

    function BloggerUpdater() {
      _ref = BloggerUpdater.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BloggerUpdater.typeKey = typeKey;

    BloggerUpdater.sourceKey = sourceKey;

    BloggerUpdater.prototype.createDefinition = function() {
      return {
        key: sourceKey,
        types: [typeKey],
        config: {
          feedUrl: 'http://tetk.blogspot.com/feeds/posts/default?alt=json',
          sharedCategories: ['t3kt.net']
        },
        update: function(projects) {
          var sharedCategories;
          sharedCategories = this.source.config.sharedCategories || [];
          return util.requestAsync(this.source.config.feedUrl).done(function(body) {
            var categories, data, entry, project, results;
            data = JSON.parse(body);
            results = (function() {
              var _i, _j, _len, _len1, _ref1, _results;
              _ref1 = data.feed.entry;
              _results = [];
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                entry = _ref1[_i];
                categories = (entry.category || []).map(function(c) {
                  return c.term;
                });
                projects = [];
                for (_j = 0, _len1 = projects.length; _j < _len1; _j++) {
                  project = projects[_j];
                  if (matchesCategories(categories, project.blogCategories)) {
                    projects.push(project.key);
                  }
                }
                if (!projects.length && !matchesCategories(categories, sharedCategories)) {
                  continue;
                }
                _results.push(db.asyncFindOne('items', [
                  {
                    type: typeKey,
                    source: sourceKey,
                    externalId: entry.id.$t
                  }
                ]).pipe(function(exists) {
                  var ent;
                  if (exists) {
                    return;
                  }
                  ent = createItem(typeKey, sourceKey, entry.id.$t, {
                    posted: moment(entry.published.$t).toDate(),
                    categories: categories,
                    title: entry.title.$t,
                    contentHtml: entry.content.$t,
                    projects: projects
                  });
                  return db.insertItem(ent);
                }));
              }
              return _results;
            })();
            return util.whenAll(results);
          });
        }
      };
    };

    return BloggerUpdater;

  })(SourceUpdater);

  module.exports = BloggerUpdater;

}).call(this);
