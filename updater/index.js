// Generated by CoffeeScript 1.6.3
(function() {
  var Deferred, NOT_IMPLEMENTED, SourceUpdater, config, db, registerSourceUpdater, supportedSources, updateAll, util, _;

  config = require('../config/config');

  util = require('../models/util');

  NOT_IMPLEMENTED = util.NOT_IMPLEMENTED;

  db = require('../models/db');

  Deferred = require('Deferred');

  _ = require('lodash');

  SourceUpdater = (function() {
    SourceUpdater.sourceKey = null;

    SourceUpdater.typeKey = null;

    SourceUpdater.source = null;

    function SourceUpdater(opts) {
      this.opts = opts || {};
      this.sourceKey = this.constructor.sourceKey;
      this.typeKey = this.constructor.typeKey;
    }

    SourceUpdater.prototype.run = function(projects) {
      var _this = this;
      return db.asyncFindOne('source', {
        key: this.constructor.sourceKey
      }).pipe(function(s) {
        return s || _this.createDefinition();
      }).done(function(s) {
        _this.source = s;
        return _this.update(projects);
      });
    };

    SourceUpdater.prototype.createDefinition = function() {
      return {
        key: this.constructor.sourceKey,
        types: [this.constructor.typeKey]
      };
    };

    SourceUpdater.prototype.update = function(projects) {
      var project,
        _this = this;
      return util.whenAll((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = projects.length; _i < _len; _i++) {
          project = projects[_i];
          _results.push(this.updateProject(project));
        }
        return _results;
      }).call(this)).done(function() {
        return _this.updateDefinition();
      });
    };

    SourceUpdater.prototype.updateProject = function(project) {
      return NOT_IMPLEMENTED();
    };

    SourceUpdater.prototype.updateDefinition = function() {};

    return SourceUpdater;

  })();

  exports.SourceUpdater = SourceUpdater;

  exports.createItem = function(type, source, externalId, props) {
    var item;
    item = {
      type: type,
      source: source,
      key: "" + type + ":" + source + ":" + externalId,
      externalId: externalId,
      updated: new Date(),
      external: true
    };
    return _.extend(item, props);
  };

  supportedSources = {};

  registerSourceUpdater = function(updater) {
    return supportedSources[updater.sourceKey] = updater;
  };

  [require('./github-updater'), require('./flickr-updater'), require('./vimeo-updater'), require('./blogger-updater')].forEach(registerSourceUpdater);

  updateAll = function(opts) {
    var projectKeys, sourceKey, sources, updater, updaters;
    opts = opts || {};
    sources = opts.sources || Object.keys(supportedSources);
    updaters = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = sources.length; _i < _len; _i++) {
        sourceKey = sources[_i];
        updater = supportedSources[sourceKey];
        if (!updater) {
          throw new Error('Source not supported: ' + sourceKey);
        }
        _results.push(updater);
      }
      return _results;
    })();
    projectKeys = opts.projects;
    return db.getProjects().pipe(function(projects) {
      var p, _i, _len;
      for (_i = 0, _len = projects.length; _i < _len; _i++) {
        p = projects[_i];
        if (!projectKeys || projectKeys.indexOf(p.key) !== -1) {
          projects = p;
        }
      }
      return util.whenAll((function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = updaters.length; _j < _len1; _j++) {
          updater = updaters[_j];
          console.log("Running updater " + updater.sourceKey + ":" + updater.typeKey + "...");
          _results.push(updater.update(projects).done(function() {
            return console.log("Updater " + updater.sourceKey + ":" + updater.typeKey + " finished");
          }));
        }
        return _results;
      })());
    }).done(function() {
      return console.log('All updaters finished');
    });
  };

  exports.updateAll = updateAll;

}).call(this);
