// Generated by CoffeeScript 1.6.3
(function() {
  var Deferred, GithubUpdater, NOT_IMPLEMENTED, TypeUpdater, config, db, moment, parseLinkHeader, request, retrieveCommitBatch, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  config = require('../config/config');

  util = require('../models/util');

  NOT_IMPLEMENTED = util.NOT_IMPLEMENTED;

  db = require('../models/db');

  request = require('request');

  moment = require('moment');

  Deferred = require('Deferred');

  TypeUpdater = require('./index').TypeUpdater;

  parseLinkHeader = require('./linkheaders').parse;

  retrieveCommitBatch = function(url, callback) {
    return util.requestAsync(url).pipe(function(body, response) {
      var commits;
      commits = JSON.parse(body);
      return util.when(callback(commits)).done(function(result) {
        var header, link, links, next;
        if (result === false) {
          return;
        }
        header = response.hasHeader('link', null);
        header = header && response.headers[header];
        links = header && parseLinksHeader(header);
        if (links) {
          next = ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = links.length; _i < _len; _i++) {
              link = links[_i];
              if (link.rel === 'next') {
                _results.push(link.href);
              }
            }
            return _results;
          })())[0];
          if (next) {
            return retrieveCommitBatch(next, callback);
          }
        }
      });
    });
  };

  GithubUpdater = (function(_super) {
    __extends(GithubUpdater, _super);

    GithubUpdater.typeKey = 'commit';

    function GithubUpdater() {}

    GithubUpdater.prototype.updateProject = function(project) {
      var repoUrl,
        _this = this;
      if (!project.githubRepo) {
        return Deferred.when();
      } else {
        repoUrl = "https://api.github.com/repos/t3kt/" + project.githubRepo;
        return util.requestAsync(repoUrl).pipe(function(body) {
          var repo;
          repo = JSON.parse(body);
          return retrieveCommitBatch(repoUrl + "/commits?per_page=50", function(commits) {
            var addedAny, key, obj, results;
            addedAny = false;
            results = (function() {
              var _i, _len, _results,
                _this = this;
              _results = [];
              for (_i = 0, _len = commits.length; _i < _len; _i++) {
                obj = commits[_i];
                key = "commit:github:" + repo.id + ":" + obj.sha;
                _results.push(db.getItem(key).done(function(exists) {
                  var commit;
                  if (exists) {
                    return;
                  }
                  commit = {
                    key: key,
                    type: GithubUpdater.typeKey,
                    detailUrl: obj.html_url,
                    posted: moment(obj.commit.committer.date).toDate(),
                    title: obj.commit.message,
                    updated: new Date(),
                    external: true
                  };
                  return db.insertItem(commit);
                }));
              }
              return _results;
            }).call(_this);
            return util.whenAll(results, function() {
              return NOT_IMPLEMENTED();
            });
          });
        });
      }
    };

    return GithubUpdater;

  })(TypeUpdater);

  module.exports = GithubUpdater;

}).call(this);
